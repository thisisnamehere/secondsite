import sqlite3 from 'sqlite3';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const DB_FILE = process.env.DB_FILE || resolve(__dirname, '../../maindb.sqlite');

// Promise-–æ–±—ë—Ä—Ç–∫–∏
function dbRun(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function(err) {
      if (err) reject(err);
      else resolve({ lastID: this.lastID, changes: this.changes });
    });
  });
}

function dbGet(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) reject(err);
      else resolve(row);
    });
  });
}

function dbAll(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
}

function dbExec(db, sql) {
  return new Promise((resolve, reject) => {
    db.exec(sql, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
}

async function migrate() {
  const db = new sqlite3.Database(DB_FILE, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
      process.exit(1);
    }
  });

  // –í–∫–ª—é—á–∞–µ–º foreign keys
  await dbRun(db, 'PRAGMA foreign_keys = ON');

  console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã cities
    const citiesTable = await dbGet(
      db,
      "SELECT name FROM sqlite_master WHERE type='table' AND name='cities'"
    );

    if (!citiesTable) {
      console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cities...');
      await dbExec(db, `
        CREATE TABLE cities (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT UNIQUE NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
      const cities = ['–ú–æ—Å–∫–≤–∞', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–í–æ–ª–≥–æ–≥—Ä–∞–¥'];
      for (const city of cities) {
        await dbRun(db, 'INSERT INTO cities (name) VALUES (?)', [city]);
      }
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cities —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    } else {
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ cities —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories
    const categoriesTable = await dbGet(
      db,
      "SELECT name FROM sqlite_master WHERE type='table' AND name='categories'"
    );

    if (!categoriesTable) {
      console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories...');
      await dbExec(db, `
        CREATE TABLE categories (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT UNIQUE NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = ['–í—Ä–∞—á–∞–º', '–°—Ç—É–¥–µ–Ω—Ç–∞–º', '–ó—É–±–æ—Ç–µ—Ö–Ω–∏–∫–∞–º'];
      for (const category of categories) {
        await dbRun(db, 'INSERT INTO categories (name) VALUES (?)', [category]);
      }
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    } else {
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ categories —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã instruments
    const instrumentsTable = await dbGet(
      db,
      "SELECT name FROM sqlite_master WHERE type='table' AND name='instruments'"
    );

    if (!instrumentsTable) {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã instruments...');
      await dbExec(db, `
        CREATE TABLE instruments (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          city_id INTEGER NOT NULL,
          name TEXT NOT NULL,
          category TEXT,
          quantity INTEGER DEFAULT 0,
          received_at DATE,
          status TEXT DEFAULT 'available',
          note TEXT,
          lookup TEXT,
          archived BOOLEAN DEFAULT 0,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (city_id) REFERENCES cities(id) ON DELETE CASCADE
        )
      `);
      
      // –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_city ON instruments(city_id)');
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_category ON instruments(category)');
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_status ON instruments(status)');
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_received ON instruments(received_at)');
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_quantity ON instruments(quantity)');
      await dbExec(db, 'CREATE INDEX IF NOT EXISTS idx_instruments_lookup ON instruments(lookup)');
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ instruments —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏');
    } else {
      console.log('‚úì –¢–∞–±–ª–∏—Ü–∞ instruments —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è archived –≤ —Ç–∞–±–ª–∏—Ü–µ instruments
    const columns = await dbAll(db, "PRAGMA table_info(instruments)");
    const hasArchived = columns.some(col => col.name === 'archived');

    if (!hasArchived) {
      console.log('üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è archived –≤ —Ç–∞–±–ª–∏—Ü—É instruments...');
      await dbExec(db, 'ALTER TABLE instruments ADD COLUMN archived BOOLEAN DEFAULT 0');
      console.log('‚úÖ –ü–æ–ª–µ archived –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚úì –ü–æ–ª–µ archived —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ –Ω–æ–≤—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');
    await dbRun(db, "UPDATE instruments SET status = 'available' WHERE status = 'new'");
    await dbRun(db, "UPDATE instruments SET status = 'in_transit' WHERE status = 'repair'");
    await dbRun(db, "UPDATE instruments SET status = 'out_of_stock' WHERE status = 'disposed'");
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å quantity = 0
    const result = await dbRun(db, 'UPDATE instruments SET archived = 1 WHERE quantity = 0 AND archived = 0');
    if (result.changes > 0) {
      console.log(`üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${result.changes}`);
    }

    console.log('');
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await dbGet(db, `
      SELECT 
        (SELECT COUNT(*) FROM cities) as cities,
        (SELECT COUNT(*) FROM categories) as categories,
        (SELECT COUNT(*) FROM instruments WHERE archived = 0) as active_instruments,
        (SELECT COUNT(*) FROM instruments WHERE archived = 1) as archived_instruments
    `);
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   –ì–æ—Ä–æ–¥–æ–≤: ${stats.cities}`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.categories}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${stats.active_instruments}`);
    console.log(`   –ê—Ä—Ö–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${stats.archived_instruments}`);
    console.log('');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    db.close();
    process.exit(1);
  } finally {
    db.close();
  }
}

migrate();
