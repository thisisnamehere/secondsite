import sqlite3 from 'sqlite3';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü—É—Ç—å –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const dbPath = process.env.DB_FILE || resolve(__dirname, '../../maindb.sqlite');

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dbDir = dirname(dbPath);
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir, { recursive: true });
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbPath);
});

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
db.run('PRAGMA foreign_keys = ON');

// Promise-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
export const dbGet = (sql, params = []) => {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) reject(err);
      else resolve(row);
    });
  });
};

export const dbAll = (sql, params = []) => {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
};

export const dbRun = (sql, params = []) => {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) reject(err);
      else resolve({ lastID: this.lastID, changes: this.changes });
    });
  });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î
export const initDatabase = async () => {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î...');

    // –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–æ–≤
    await dbRun(`
      CREATE TABLE IF NOT EXISTS cities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await dbRun(`
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await dbRun(`
      CREATE TABLE IF NOT EXISTS instruments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        city_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        category TEXT,
        quantity INTEGER DEFAULT 0,
        received_at DATE,
        status TEXT DEFAULT 'available',
        note TEXT,
        lookup TEXT,
        archived BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (city_id) REFERENCES cities(id) ON DELETE CASCADE
      )
    `);

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_city ON instruments(city_id)');
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_category ON instruments(category)');
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_status ON instruments(status)');
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_received ON instruments(received_at)');
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_quantity ON instruments(quantity)');
    await dbRun('CREATE INDEX IF NOT EXISTS idx_instruments_lookup ON instruments(lookup)');

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ archived
    const columns = await dbAll("PRAGMA table_info(instruments)");
    const hasArchived = columns.some(col => col.name === 'archived');
    
    if (!hasArchived) {
      console.log('‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ archived –≤ —Ç–∞–±–ª–∏—Ü—É instruments...');
      await dbRun('ALTER TABLE instruments ADD COLUMN archived BOOLEAN DEFAULT 0');
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ archived –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥–∞
    const citiesCount = await dbGet('SELECT COUNT(*) as count FROM cities');
    if (citiesCount.count === 0) {
      console.log('üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤...');
      const cities = ['–ú–æ—Å–∫–≤–∞', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–í–æ–ª–≥–æ–≥—Ä–∞–¥'];
      for (const city of cities) {
        await dbRun('INSERT INTO cities (name) VALUES (?)', [city]);
      }
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤:', cities.length);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesCount = await dbGet('SELECT COUNT(*) as count FROM categories');
    if (categoriesCount.count === 0) {
      console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      const categories = ['–í—Ä–∞—á–∞–º', '–°—Ç—É–¥–µ–Ω—Ç–∞–º', '–ó—É–±–æ—Ç–µ—Ö–Ω–∏–∫–∞–º'];
      for (const category of categories) {
        await dbRun('INSERT INTO categories (name) VALUES (?)', [category]);
      }
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length);
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    throw error;
  }
};

export default db;
